{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f095060f62969639bba264a3918883eef379d47d22785f0b378c25af0d5830d164736f6c634300081a0033","sourceMap":"799:7682:149:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;799:7682:149;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f095060f62969639bba264a3918883eef379d47d22785f0b378c25af0d5830d164736f6c634300081a0033","sourceMap":"799:7682:149:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"v1-migrator/contracts/dependencies/utils/cryptography/MerkleProofUpgradeable.sol\":\"MerkleProofUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=v1-migrator/node_modules/@openzeppelin/\"]},\"sources\":{\"v1-migrator/contracts/dependencies/utils/cryptography/MerkleProofUpgradeable.sol\":{\"keccak256\":\"0x4c91e851f295b7f07a789d92ccb0ced46dce55fef30a5a076889721a9f6eed21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://679d03187589dd03ddf578f2eb89a7c26edf103adec74fb7a047813dd94d2824\",\"dweb:/ipfs/Qmb6mFj5PofTeNaFGU4mxzr6LVTiNZ2jrRvZ63bDqh5aM2\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=v1-migrator/node_modules/@openzeppelin/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"v1-migrator/contracts/dependencies/utils/cryptography/MerkleProofUpgradeable.sol":"MerkleProofUpgradeable"},"evmVersion":"paris","libraries":{}},"sources":{"v1-migrator/contracts/dependencies/utils/cryptography/MerkleProofUpgradeable.sol":{"keccak256":"0x4c91e851f295b7f07a789d92ccb0ced46dce55fef30a5a076889721a9f6eed21","urls":["bzz-raw://679d03187589dd03ddf578f2eb89a7c26edf103adec74fb7a047813dd94d2824","dweb:/ipfs/Qmb6mFj5PofTeNaFGU4mxzr6LVTiNZ2jrRvZ63bDqh5aM2"],"license":"MIT"}},"version":1},"id":149}