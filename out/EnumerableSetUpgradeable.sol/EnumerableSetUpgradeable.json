{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a1a5e9c3be1c4dfb6ae61835568aff4af8d2c9de057f9101ec1d2e971eeeb95a64736f6c634300081a0033","sourceMap":"1326:11641:170:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1326:11641:170;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a1a5e9c3be1c4dfb6ae61835568aff4af8d2c9de057f9101ec1d2e971eeeb95a64736f6c634300081a0033","sourceMap":"1326:11641:170:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"v1-migrator/contracts/dependencies/utils/structs/EnumerableSetUpgradeable.sol\":\"EnumerableSetUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=v1-migrator/node_modules/@openzeppelin/\"]},\"sources\":{\"v1-migrator/contracts/dependencies/utils/structs/EnumerableSetUpgradeable.sol\":{\"keccak256\":\"0x3753924aa8f8ef663cbb28d1f214b4ed0206a1832a98cb8f3a4938a71e76f602\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9d2a1934171617f97273f1a0a3640363c62861e1de1ac9ce1ab2a9d5b8ca93a\",\"dweb:/ipfs/QmXwTYK7Vu5DAJr2VhA3RYxEvC8ujx9oQPMmccpTxPBb63\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=v1-migrator/node_modules/@openzeppelin/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"v1-migrator/contracts/dependencies/utils/structs/EnumerableSetUpgradeable.sol":"EnumerableSetUpgradeable"},"evmVersion":"paris","libraries":{}},"sources":{"v1-migrator/contracts/dependencies/utils/structs/EnumerableSetUpgradeable.sol":{"keccak256":"0x3753924aa8f8ef663cbb28d1f214b4ed0206a1832a98cb8f3a4938a71e76f602","urls":["bzz-raw://a9d2a1934171617f97273f1a0a3640363c62861e1de1ac9ce1ab2a9d5b8ca93a","dweb:/ipfs/QmXwTYK7Vu5DAJr2VhA3RYxEvC8ujx9oQPMmccpTxPBb63"],"license":"MIT"}},"version":1},"id":170}